name: Reusable build app workflow for production

on:
  workflow_call:
    inputs:
      node-version:
        required: true
        type: string
      skip-e2e-test:
        type: boolean
      cypress-report-artifact-name-prefix:
        type: string
      cypress-config-video:
        type: boolean
        default: false
    secrets:
      SLACK_WEBHOOK_URL:
        required: true

jobs:

  build-prod:
    runs-on: ubuntu-latest

    outputs:
      PROD_FILES: ${{ steps.archive-prod-files.outputs.file }}

    steps:
    - uses: actions/checkout@v4
      with:
        # retrieve local font files
        lfs: true

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'yarn'
        cache-dependency-path: '**/yarn.lock'

    - name: Install turbo
      run: |
        yarn global add turbo

    - name: Prune repositories
      run: |
        turbo prune @growi/app
        rm -rf apps packages
        mv out/* .

    - name: Cache/Restore node_modules
      uses: actions/cache@v4
      with:
        path: |
          **/node_modules
          !**/node_modules/.cache/turbo
        key: node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-

    - name: Install dependencies
      run: |
        yarn global add node-gyp
        yarn --frozen-lockfile

    - name: Cache/Restore dist
      uses: actions/cache@v4
      with:
        path: |
          **/.turbo
          **/dist
          **/node_modules/.cache/turbo
          ${{ github.workspace }}/apps/app/.next
        key: dist-app-prod-${{ runner.OS }}-node${{ inputs.node-version }}-${{ github.sha }}
        restore-keys: |
          dist-app-prod-${{ runner.OS }}-node${{ inputs.node-version }}-

    - name: Build
      working-directory: ./apps/app
      run: |
        turbo run build --env-mode=loose
      env:
        ANALYZE: 1

    - name: Archive production files
      id: archive-prod-files
      run: |
        tar -zcf production.tar.gz \
          package.json \
          apps/app/.next \
          apps/app/config \
          apps/app/dist \
          apps/app/public \
          apps/app/resource \
          apps/app/tmp \
          apps/app/.env.production* \
          apps/app/package.json \
          packages/*/dist \
          packages/*/package.json
        echo "file=production.tar.gz" >> $GITHUB_OUTPUT

    - name: Upload production files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: Production Files (node${{ inputs.node-version }})
        path: ${{ steps.archive-prod-files.outputs.file }}

    - name: Upload report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: Bundle Analyzing Report (node${{ inputs.node-version }})
        path: |
          apps/app/.next/analyze/client.html
          apps/app/.next/analyze/server.html

    - name: Slack Notification
      uses: weseek/ghaction-slack-notification@master
      if: failure()
      with:
        type: ${{ job.status }}
        job_name: '*Node CI for growi - build-prod (${{ inputs.node-version }})*'
        channel: '#ci'
        isCompactMode: true
        url: ${{ secrets.SLACK_WEBHOOK_URL }}


  launch-prod:
    needs: [build-prod]
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
        - 27017/tcp
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
        ports:
        - 9200/tcp
        env:
          discovery.type: single-node

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'yarn'
        cache-dependency-path: '**/yarn.lock'

    - name: Install turbo
      run: |
        yarn global add turbo

    - name: Prune repositories
      run: |
        turbo prune @growi/app
        rm -rf apps packages
        mv out/* .

    - name: Restore node_modules
      uses: actions/cache/restore@v4
      with:
        path: |
          **/node_modules
        # shared key with build-prod
        key: node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-

    - name: Install dependencies
      run: |
        yarn --production

    - name: Download production files artifact
      uses: actions/download-artifact@v4
      with:
        name: Production Files (node${{ inputs.node-version }})

    - name: Extract procution files artifact
      run: |
        tar -xf ${{ needs.build-prod.outputs.PROD_FILES }}

    - name: yarn server:ci
      working-directory: ./apps/app
      run: |
        cp config/ci/.env.local.for-ci .env.production.local
        yarn server:ci
      env:
        MONGO_URI: mongodb://localhost:${{ job.services.mongodb.ports['27017'] }}/growi
        ELASTICSEARCH_URI: http://localhost:${{ job.services.elasticsearch.ports['9200'] }}/growi

    - name: Slack Notification
      uses: weseek/ghaction-slack-notification@master
      if: failure()
      with:
        type: ${{ job.status }}
        job_name: '*Node CI for growi - build-prod (${{ inputs.node-version }})*'
        channel: '#ci'
        isCompactMode: true
        url: ${{ secrets.SLACK_WEBHOOK_URL }}



  run-cypress:
    needs: [build-prod]

    if: ${{ !inputs.skip-e2e-test }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # List string expressions that is comma separated ids of tests in "test/cypress/integration"
        spec-group: ['20', '21', '22', '23', '30', '50']

    services:
      mongodb:
        image: mongo:6.0
        ports:
        - 27017/tcp
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
        ports:
        - 9200/tcp
        env:
          discovery.type: single-node

    steps:
    - uses: actions/checkout@v4

    - name: Install fonts
      run: sudo apt install fonts-noto

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'yarn'
        cache-dependency-path: '**/yarn.lock'

    - name: Install turbo
      run: |
        yarn global add turbo

    - name: Prune repositories
      run: |
        turbo prune @growi/app
        rm -rf apps packages
        mv out/* .

    - name: Restore node_modules
      uses: actions/cache/restore@v4
      with:
        path: |
          **/node_modules
        # saved key by build-prod
        key: node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-

    - name: Cache/Restore Cypress files
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/Cypress
        key: deps-for-cypress-${{ runner.OS }}-node${{ inputs.node-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          deps-for-cypress-${{ runner.OS }}-node${{ inputs.node-version }}-

    - name: Install dependencies
      run: |
        yarn global add node-gyp
        yarn --frozen-lockfile
        yarn cypress install

    - name: Download production files artifact
      uses: actions/download-artifact@v4
      with:
        name: Production Files (node${{ inputs.node-version }})

    - name: Extract procution files artifact
      run: |
        tar -xf ${{ needs.build-prod.outputs.PROD_FILES }}

    - name: Determine spec expression
      id: determine-spec-exp
      run: |
        SPEC=`node bin/github-actions/generate-cypress-spec-arg.mjs --prefix="test/cypress/e2e/" --suffix="-*/*.cy.{ts,tsx}" "${{ matrix.spec-group }}"`
        echo "value=$SPEC" >> $GITHUB_OUTPUT

    - name: Copy dotenv file for ci
      working-directory: ./apps/app
      run: |
        cat config/ci/.env.local.for-ci >> .env.production.local

    - name: Copy dotenv file for automatic installation
      if: ${{ matrix.spec-group != '10' }}
      working-directory: ./apps/app
      run: |
        cat config/ci/.env.local.for-auto-install >> .env.production.local

    - name: Copy dotenv file for automatic installation with allowing guest mode
      if: ${{ matrix.spec-group == '21' }}
      working-directory: ./apps/app
      run: |
        cat config/ci/.env.local.for-auto-install-with-allowing-guest >> .env.production.local

    - name: Cypress Run
      uses: cypress-io/github-action@v6
      with:
        browser: chromium
        working-directory: ./apps/app
        spec: '${{ steps.determine-spec-exp.outputs.value }}'
        install: false
        start: yarn server
        wait-on: 'http://localhost:3000'
        config: video=${{ inputs.cypress-config-video }}
      env:
        MONGO_URI: mongodb://localhost:${{ job.services.mongodb.ports['27017'] }}/growi-vrt
        ELASTICSEARCH_URI: http://localhost:${{ job.services.elasticsearch.ports['9200'] }}/growi

    - name: Upload results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.cypress-report-artifact-name-prefix }}${{ matrix.spec-group }}
        path: |
          apps/app/test/cypress/screenshots
          apps/app/test/cypress/videos

    - name: Slack Notification
      uses: weseek/ghaction-slack-notification@master
      if: failure()
      with:
        type: ${{ job.status }}
        job_name: '*Node CI for growi - run-cypress (${{ inputs.node-version }})*'
        channel: '#ci'
        isCompactMode: true
        url: ${{ secrets.SLACK_WEBHOOK_URL }}



  run-playwright:
    needs: [build-prod]

    if: ${{ !inputs.skip-e2e-test }}

    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/2, 2/2]

    services:
      mongodb:
        image: mongo:6.0
        ports:
        - 27017/tcp
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
        ports:
        - 9200/tcp
        env:
          discovery.type: single-node

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'yarn'
        cache-dependency-path: '**/yarn.lock'

    - name: Restore node_modules
      uses: actions/cache/restore@v4
      with:
        path: |
          **/node_modules
        # saved key by build-prod
        key: node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          node_modules-app-build-prod-${{ runner.OS }}-node${{ inputs.node-version }}-

    - name: Install dependencies
      run: |
        yarn global add node-gyp
        yarn --frozen-lockfile

    - name: Install Playwright browsers
      run: |
        yarn playwright install --with-deps ${{ matrix.browser }}

    - name: Download production files artifact
      uses: actions/download-artifact@v4
      with:
        name: Production Files (node${{ inputs.node-version }})

    - name: Extract procution files artifact
      run: |
        tar -xf ${{ needs.build-prod.outputs.PROD_FILES }}

    - name: Copy dotenv file for ci
      working-directory: ./apps/app
      run: |
        cat config/ci/.env.local.for-ci >> .env.production.local

    - name: Playwright Run (--project=chromium/installer)
      if: ${{ matrix.browser == 'chromium' }}
      working-directory: ./apps/app
      run: |
        yarn playwright test --project=chromium/installer
      env:
        HOME: /root # ref: https://github.com/microsoft/playwright/issues/6500
        MONGO_URI: mongodb://mongodb:27017/growi-playwright-installer
        ELASTICSEARCH_URI: http://localhost:${{ job.services.elasticsearch.ports['9200'] }}/growi

    - name: Copy dotenv file for automatic installation
      working-directory: ./apps/app
      run: |
        cat config/ci/.env.local.for-auto-install >> .env.production.local

    - name: Playwright Run
      working-directory: ./apps/app
      run: |
        yarn playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
      env:
        HOME: /root # ref: https://github.com/microsoft/playwright/issues/6500
        MONGO_URI: mongodb://mongodb:27017/growi-playwright
        ELASTICSEARCH_URI: http://localhost:${{ job.services.elasticsearch.ports['9200'] }}/growi

    - name: Copy dotenv file for automatic installation with allowing guest mode
      working-directory: ./apps/app
      run: |
        cat config/ci/.env.local.for-auto-install-with-allowing-guest >> .env.production.local

    - name: Playwright Run (--project=${browser}/guest-mode)
      working-directory: ./apps/app
      run: |
        yarn playwright test --project=${{ matrix.browser }}/guest-mode --shard=${{ matrix.shard }}
      env:
        HOME: /root # ref: https://github.com/microsoft/playwright/issues/6500
        MONGO_URI: mongodb://mongodb:27017/growi-playwright-guest-mode
        ELASTICSEARCH_URI: http://localhost:${{ job.services.elasticsearch.ports['9200'] }}/growi

    - name: Slack Notification
      uses: weseek/ghaction-slack-notification@master
      if: failure()
      with:
        type: ${{ job.status }}
        job_name: '*Node CI for growi - run-playwright*'
        channel: '#ci'
        isCompactMode: true
        url: ${{ secrets.SLACK_WEBHOOK_URL }}
